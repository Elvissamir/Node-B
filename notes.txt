############ NODE CONCEPTS
- NODE IS A RUNTIME ENVIRONMENT FOR EXECUTING JAVASCRIPT CODE.

- JS ENGINE CONVERTS JS CODE TO MACHINE CODE.

- NODE USES THE V8 ENGINE.

- NODE does not use the DOM (DOCUMENT OBJECT MODEL), instead it provides
some additional modules.

- NODE has the global object, and it has some of the methods that can 
be used with the window object in browsers. Some examples: 

* global.console.log()
* global.setInterval()


############ MODULES
- Files are considered as MODULES in NODE. The variables and functions
defined in a file are scoped to that file. If you want to use a variable
or function from that module you have to export it and make it public.

- The MODULE object in NODE represents the current module, and contains
information as: id, path, exports, filename, loaded, children, paths.

- The MODULE object property "exports" represents the parts 
(variables, objects) of the module that can be accessed in other
files.

- To export parts (variables, objects...) from the MODULE, you can use
the module.exports.property_name. Example: 

module.exports.log = log 
module.exports.url = url

- To import a module in NODE you can use the require function.
NODE assumes required files are javascript files
Example: 

const logger = require('./logger)

Then all the properties and methods that are exported from the MODULE
will be available in other MODULES.

- Each MODULE (File) in NODE is wrapped by the MODULE WRAPPER FUNCTION.
This function receives 5 parameters: 

* exports, 
* require, 
* module, 
* __filename, 
* __dirname

the function is added like this: 

(function (exports, require, module, __filename, __dirname) {
    // module code
})

That means that NODE does not execute the code directly


########## EVENTS
- An EVENT is: A signal that something has happened

- In NODE the EVENT MODULE can be required like this: 
const EventEmitter = require("events")

the events module exports a class, then to use the methods
you have to instanciate the class

const emitter = new EventEmitter()

- To register a listener:
emitter.on('event_name', callback)

- To raise an event: 
emitter.emit('event_name')

- The callback function provided to the event listener asigned 
to a certain event will be executed when the event is raised.

- To raise an event with data: 
emitter.emit('event name', args)

where args is a variable (object, integer, string, array...)

- To use the data provided by a raised event: 

emitter.on('event name', function (args) {
    console.log(args)
})

- Each EventEmitter CLASS Instance has a set of listeners and emits, 
for that reason if you use two different emitters each of them will only 
execute the callback for the assigned events


######### FS (FILE SYSTEM) MODULE
- The fs module allows interacting with the file system

- You can require this module from the fs module or 
from the fs/promises module. The promises version should be used 
with async/await.

const fs = require('fs')

or

const fs = require('fs/promises')

- To get all the files in the directory as an array you can use the 
readdir method: 

const fs = require('fs')
fs.readdir('./', (err, files) => {
    console.log(files)
})


######## HTTP MODULE 
- The http module allows creating a server that receives requests

- The https module refers to http Secure, which is a way of encrypting
HTTP 

- The http2 module refers to the new HTTP version released in 2015
that addresses some performance issues, has less errors. Can be used with 
HTTPS.

const http = require('http')
const server = http.createServer((req, res) => {
    if (req.url === '/') {
        res.write('Hello World')
        res.end()
    }
})

- The http MODULE extends the Event Emitter Class, so it is possible
to add event listeners to the server. 

server.on('connection, (socket) => {
    console.log(socket)
})

- To receive http request you have to listen to a given port, 
then the callback function specified with the createServer method will 
execute and check the conditions that were defined.

server.listen(3000)

- You can use the close method to stop the server

server.close(() => {})


######## OS MODULE
- The OS module allows getting information about the operative system, 
including some data about the machine properties like:

* platform() -> name of operative system
* freeMem() -> Free Memory in bytes
* totalMem() -> Total Memory in bytes
* arch() -> machine architecture x32 or x64
* cpus() -> number of logical CPU cores 


####### BUFFER

- The method allocUnsafe of the Buffer class returns an uninitialized Buffer.
It may contain sensitive data. It is recommended to use the alloc method 
instead.